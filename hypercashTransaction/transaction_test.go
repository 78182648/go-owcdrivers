package hypercashTransaction

import (
	"encoding/hex"
	"fmt"
	"testing"
)

func Test_ec22bc53107d13e13f1837579e67160216cc58cb601e33975623fa452099c99d(t *testing.T) {
	// 模逆链上交易 ec22bc53107d13e13f1837579e67160216cc58cb601e33975623fa452099c99d
	// 交易有一个输入 两个输出

	// 构建输入
	in := Vin{
		TxID: "cfc5cd7a05b3c91ae822fbe5c0c1b868044dbd787ad504ae0d4c91db4ff8c85b",
		Vout: 2,
		Tree: TxTreeRegular, // 普通交易
		Amount: 457162520800,
		LockScript: "76a914d51c3a8a8234538336c93001d14f4e28d4d8e80c88ac",
		BlockHeight: 203705, // 交易所在高度
		BlockIndex: 1, // 交易在区块中的索引
	}
	ins := []Vin{in}

	// 构建输出
	out1 := Vout{
		Amount: 20199500000,
		PkScriptVersion: DefaultPkScriptVersion,
		Address: "HsEtYE4ycUDjF38Xn7UoZPynVy6HvNz8Fjk",
	}

	out2 := Vout{
		Amount: 436962995500,
		PkScriptVersion: DefaultPkScriptVersion,
		Address: "HsX5APCXSpR49Ei1xnivBbTW35VqzaTARrX",
	}
	outs := []Vout{out1, out2}

	locktime := uint32(0)
	expiry := NoExpiryValue

	// 创建空交易单与待签哈希
	emptyTrans, hashes, err := CreateEmptyTransactionAndHash(ins, outs, locktime,expiry)

	if err != nil {
		t.Error("创建空交易单失败！")
		return
	} else {
		fmt.Println("空交易单为 : \n", emptyTrans)
		fmt.Println("待签哈希为 : \n", hashes[0])
	}


	// 对交易签名
	prikey := []byte{0x80, 0xbc, 0x39, 0x8d, 0x7c, 0x4a, 0x67, 0x4d, 0xaa, 0x97, 0x75, 0x66, 0xc2, 0xe6, 0xcd, 0x50, 0x40, 0x52, 0x00, 0x27, 0xe5, 0x7f, 0xe8, 0x06, 0xdf, 0xaa, 0x86, 0x8d, 0xf4, 0xcc, 0x43, 0xab}

	signature, err := SignTransaction(hashes[0], prikey)
	if err != nil {
		t.Error("签名交易单失败！")
		return
	} else {
		// for test only
		signature = []byte{0xf3,0x9b,0xd5,0x0c,0x00,0x9e,0x7f,0x8b,0xec,0x0d,0x4d,0x4b,0xe3,0x5c,0x98,0x5c,0x01,0x32,0x52,0xeb,0x1b,0xad,0x75,0xa5,0xea,0x90,0xea,0xf3,0xdf,0x2c,0xb4,0xb9,0x05,0xfc,0x8d,0xbd,0x3e,0x57,0x46,0x66,0xf7,0x2b,0xde,0x6f,0x93,0x1b,0x72,0x00,0xe4,0x41,0x31,0xb1,0x42,0xb1,0x0e,0x61,0xe3,0xd8,0x54,0x61,0x20,0x77,0xc7,0x58}
		fmt.Println("签名结果为 : \n", hex.EncodeToString(signature))
	}

	// 验证与合并交易单
	pubkey := []byte{0x02,0x28,0x9c,0xfa,0xe6,0x17,0x5c,0xf7,0x81,0x90,0x07,0xfd,0x81,0x9a,0x17,0xda,0x45,0x14,0xed,0xbd,0x42,0x8c,0xee,0x15,0x26,0x7b,0x14,0x23,0x5b,0xf9,0x70,0xab,0xf5}

	// 构建签名体
	sigPubs := []*SigPub{
		{
			Signature: signature,
			PublicKey: pubkey,
		},
	}

	pass, signedTrans := VerifyAndCombineTransaction(emptyTrans, sigPubs)
	if pass {
		fmt.Println("合并之后的交易单为 : \n", signedTrans)
	} else {
		t.Error("验签失败！")
	}
}